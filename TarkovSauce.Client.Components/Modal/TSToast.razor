@inject ITSToastService ToastService
@if (_isVisible)
{
    <div class="toast-wrapper">
        <div class="tstoast @_css">
            @_message
        </div>
    </div>

}
<style>
    div.toast-wrapper {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        display: flex;
        justify-content: center;
    }

        div.toast-wrapper div.tstoast {
            padding: 0.2rem;
            padding-left: 1rem;
            padding-right: 1rem;
            min-width: 40%;
            min-height: 5%;
            display: flex;
            align-content: center;
            justify-content: center;
            font-weight: 500;
            border-radius: var(--border-radius-l2);
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }

    div.tstoast.success {
        background-color: var(--toast-succ);
    }

    div.tstoast.error {
        background-color: var(--toast-err);
    }
</style>
@code {
    private string _css = "";
    private bool _isVisible;
    private string _message = "";
    private Timer? _timer;
    protected override void OnInitialized()
    {
        if (ToastService is TSToastService service)
        {
            service.OnEvent += (msg, type) =>
            {
                _message = msg;
                _css = type.ToString().ToLower();
                _timer = new Timer(OnTimerTrigger, null, 5000, 0);
                _isVisible = true;
                InvokeAsync(StateHasChanged);
            };
        }
    }
    private void OnTimerTrigger(object? state)
    {
        _isVisible = false;
        InvokeAsync(StateHasChanged);
    }
}